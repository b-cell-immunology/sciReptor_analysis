# -*- coding: utf-8 -*-
import igdb_plotting as igplt
import numpy as np
import MySQLdb as mysql
import matplotlib.pyplot as plt
import sys
import argparse
import igdb_queries as igdbq

parser = argparse.ArgumentParser()
parser.add_argument("event_infile", 
                    type = str, 
                    help="File containing different SQL queries yielding a list of event_ids.")
parser.add_argument("-d", "--database", 
                    type = str, 
                    help="optional manual input of database, otherwise taken from config")
parser.add_argument("-n", "--normalize", 
                    help="normalization to total count", 
                    action="store_true")
parser.add_argument("-r", "--region", type=str, 
                    help="Region of interest. Thought for CDR3, but also others can be plotted.", 
                    choices=['CDR1','CDR2','CDR3','FR1','FR2','FR3'])
parser.add_argument("-l", "--locus", type=str, 
                    help="locus H, K, L", 
                    choices=['H','K','L'])
parser.add_argument("-c", "--cumulative",
                    help="Show cumulative frequencies", 
                    action="store_true")
parser.add_argument("-o", "--outputdir", type=str, 
                    help="directory for pdf output") 

args = parser.parse_args()

db = args.database


# connect to database via ~/.my.conf settings
connection = mysql.connect(db=db,read_default_file="~/.my.cnf", read_default_group='mysql_igdb')
cursor = connection.cursor()

# generate event list. Will later on be generated by another program and taken up by pickle (or called as module).

event_names, event_statements = igdbq.read_eventfile(args.event_infile, db)

def get_region_lengths (event_statement):
    
    region_statement = "SELECT COUNT(DISTINCT sequences.seq_id) as cnt, prot_length \
            FROM %s.CDR_FWR \
            JOIN %s.sequences ON sequences.seq_id = CDR_FWR.seq_id \
            AND sequences.consensus_rank = 1 \
            JOIN %s.event ON event.event_id = sequences.seq_id \
            WHERE CDR_FWR.region = '%s' and sequences.locus = '%s' \
            AND event.event_id IN (%s) \
            GROUP BY prot_length \
            ORDER BY prot_length ASC" % (db, db, db, args.region, args.locus, event_statement)
   
    cursor.execute(region_statement)
    length_rows = cursor.fetchall()

    length_heights = []
    lengths = []
    
    for length in length_rows:
        length_heights.append(length[0])
        lengths.append(length[1])
  
    return length_heights, lengths

#plt.figure()
for event_name, event_statement in zip(event_names, event_statements):
    heights,lengths = get_region_lengths(event_statement)
    if args.normalize:
        heights = [height/float(sum(heights)) for height in heights]
    if args.cumulative:
        heights = [sum(heights[:i]) for i in range(len(heights))]
    plt.plot(lengths, heights, label = event_name)
plt.legend(loc=7)
plt.xlabel("Length of " + args.region + " region in amino acids")
if args.cumulative:
    title = "Cumulative frequency"
else:
    title = "Observed frequency"
if args.normalize:
    title = title + " (normalized)"
    
plt.ylabel(title)
ttl = plt.title(igplt.plot_log(args.region + ' region length distribution', sys.argv, db))
plt.savefig(args.outputdir + "/%s_%s_%s_%s" % (args.event_infile, args.locus, args.region, title) + '.pdf', bbox_extra_artists=(ttl,), bbox_inches='tight')
